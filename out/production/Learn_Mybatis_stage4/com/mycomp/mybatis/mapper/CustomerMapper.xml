<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    动态sql相关:
    1. if标签
    2. where标签
    3. trim标签
    4. choose标签
    5. set标签
    6. foreach标签
    7. bind标签
    8. sql片段
-->

<mapper namespace="com.mycomp.mybatis.mapper.CustomerMapper">
    <!-- 根据客户名称和职业来查询 -->
    <!--
        where和if标签;
        if标签: 满足条件则在原sql上拼接if内的语句;
        where标签: where标签能够自动添加和删除sql语句中的AND, 并且能够自动删除WHERE后的第一个AND;
    -->
    <select id="getCustomersByNameAndPro1"
            resultType="com.mycomp.mybatis.domain.Customer">
        SELECT *
        FROM customer
        <where>
            <if test="name != null and name != ''">
                cust_name = #{name}
            </if>
            <if test="profession != null and profession != ''">
                AND cust_profession = #{profession}
            </if>
        </where>
    </select>

    <!--
        trim标签:
        prefix: 设置前缀
        prefixOverrides: 条件前缀覆盖
        suffix: 设置后缀
        suffixOverrides: 条件后缀覆盖
    -->
    <select id="getCustomersByNameAndPro2"
            resultType="com.mycomp.mybatis.domain.Customer">
        SELECT *
        FROM customer
        <trim prefix="where" prefixOverrides="AND" suffixOverrides="AND">
            <if test="name != null and name != ''">
                cust_name = #{name}
            </if>
            <if test="profession != null and profession != ''">
                AND cust_profession = #{profession}
            </if>
        </trim>
    </select>

    <!--
        choose标签:
        只要第一个条件满足, 后面都不执行(最多只会执行一个when);
    -->
    <select id="getCustomersByNameAndPro3"
            resultType="com.mycomp.mybatis.domain.Customer">
        SELECT *
        FROM customer
        <where>
            <choose>
                <when test="name != null and name != ''">
                    cust_name = #{name}
                </when>
                <when test="profession != null and profession != ''">
                    cust_profession = #{profession}
                </when>
                <otherwise>
                    1 = 1
                </otherwise>
            </choose>
        </where>
    </select>

    <!-- 更新客户 -->
    <!--
        set标签:
        会添加UPDATE语句中的set, 并且它会自动把最后一个","删掉
    -->
    <update id="updateCustomer">
        UPDATE customer
        <set>
            <if test="cust_name != null and cust_name != ''">
                cust_name = #{cust_name},
            </if>
            <if test="cust_profession != null and cust_profession != ''">
                cust_profession = #{cust_profession},
            </if>
        </set>
        WHERE cust_id = #{cust_id}
    </update>

    <!-- 根据id查询指定的客户, 多个客户 -->
    <!--
        foreach标签:
        可以遍历list和array(foreach标签中的collection属性)
    -->
    <select id="getCustomersById1"
            parameterType="Integer[]"
            resultType="com.mycomp.mybatis.domain.Customer">
        SELECT *
        FROM customer
        WHERE cust_id IN
        <foreach collection="array" open="(" close=")" separator="," item="id">
            #{id}
        </foreach>
    </select>

    <select id="getCustomersById2"
            parameterType="List"
            resultType="com.mycomp.mybatis.domain.Customer">
        SELECT *
        FROM customer
        WHERE cust_id IN
        <foreach collection="list" open="(" close=")" separator="," item="id">
            #{id}
        </foreach>
    </select>

    <!-- 也可以传入一个类(查询的包装类) -->
    <!-- 这时, foreach中的collection就不是list或array了, 而是这个包装类中的属性名, 它会自动地识别是list还是array -->
    <select id="getCustomersById3"
            parameterType="com.mycomp.mybatis.domain.QueryVo"
            resultType="com.mycomp.mybatis.domain.Customer">
        SELECT *
        FROM customer
        WHERE cust_id IN
        <foreach collection="voIdsArr" open="(" close=")" separator=","
                 item="id">
            #{id}
        </foreach>
    </select>

    <!--
        sql片段:
        其他的sql语句可以引用sql片段, 提高复用性;
        可以在里面做一些判断, 根据情况返回不同的sql片段;

        也可以在include的时候定义一些值, 并在这里取出;
        注意, 在include中定义的值, 在这里取的时候需要使用${}的形式;
    -->
    <sql id="selectCust">
        <choose>
            <!--
                <when test="id == 2">
                    SELECT cust_id, cust_name
                    FROM customer
                </when>
            -->
            <when test="${zzq} == 2">
                SELECT cust_id, cust_name
                FROM customer
            </when>
            <otherwise>
                SELECT *
                FROM customer
            </otherwise>
        </choose>
    </sql>

    <!-- 根据id查询一个客户 -->
    <!--
        bind标签:
        可以取出传入的值, 重新处理, 赋值给另外一个自己定义的变量, 或者可以直接自己生命一个变量并赋值
    -->
    <select id="getCustomerById"
            resultType="com.mycomp.mybatis.domain.Customer">
        <!-- <bind name="newId" value="2"/> -->
        <!-- 如果是传入单个的值并想要用bind对它进行操作, 传入的时候必须使用@Param注解 -->
        <bind name="newId" value="id + 1"/>

        <!-- 引入sql片段 -->
        <include refid="selectCust">
            <property name="zzq" value="2"/>
        </include>
        WHERE cust_id = #{newId}
    </select>

</mapper>